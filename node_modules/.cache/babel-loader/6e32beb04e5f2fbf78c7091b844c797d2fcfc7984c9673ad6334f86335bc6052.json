{"ast":null,"code":"import Vue from 'vue';\nimport VueRouter from 'vue-router';\nimport Login from '../views/Login.vue';\n// import Register from '../views/Register.vue'\nimport Index from '../views/Index.vue';\nimport UserMananger from '../views/UserManager.vue';\nimport Main from '../views/Main.vue';\nimport UpdateUser from '../views/UpdateUser.vue';\nVue.use(VueRouter);\nconst routes = [{\n  path: '/',\n  component: Main,\n  meta: {\n    requiresAuth: true\n  },\n  children: [{\n    path: '/userlist',\n    name: '用户管理',\n    component: UserMananger,\n    meta: {\n      requiresAuth: true\n    } // 标记需要登录的路由\n  }]\n}, {\n  path: '/login',\n  name: 'Login',\n  component: Login\n}, {\n  path: '/register',\n  name: 'Register',\n  component: Register,\n  show: false\n}, {\n  path: '/UpdateUser',\n  name: 'Register',\n  component: UpdateUser,\n  show: false\n}, {\n  path: '/index',\n  name: '用户管理',\n  component: Index,\n  show: true,\n  redirect: \"/userlist\",\n  children: [{\n    path: \"/userMananger\",\n    name: \"查询用户\",\n    component: UserMananger\n  }, {\n    path: \"/register\",\n    name: \"添加用户\",\n    component: Register\n  }]\n}];\nconst router = new VueRouter({\n  routes\n});\nrouter.beforeEach((to, from, next) => {\n  // 检查是否需要登录的路由\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    // 这里可以实现登录状态的检查，例如检查localStorage或vuex状态\n    const isLoggedIn = localStorage.getItem('isLoggedIn') === 'true';\n    if (!isLoggedIn) {\n      alert('没有登录');\n      // 如果未登录，则重定向到登录页面\n      next('/login');\n    } else {\n      next(); // 如果已登录，继续前往目标路由\n    }\n  } else {\n    next(); // 如果不需要登录，继续前往目标路由\n  }\n});\nexport default router;","map":{"version":3,"names":["Vue","VueRouter","Login","Index","UserMananger","Main","UpdateUser","use","routes","path","component","meta","requiresAuth","children","name","Register","show","redirect","router","beforeEach","to","from","next","matched","some","record","isLoggedIn","localStorage","getItem","alert"],"sources":["C:/Users/Kiki/vv/seawiki-vue/src/router/index.js"],"sourcesContent":["import Vue from 'vue'\nimport VueRouter from 'vue-router'\nimport Login from '../views/Login.vue'\n// import Register from '../views/Register.vue'\nimport Index from '../views/Index.vue'\nimport UserMananger from '../views/UserManager.vue'\nimport Main from '../views/Main.vue'\nimport UpdateUser from '../views/UpdateUser.vue'\n\nVue.use(VueRouter)\n\nconst routes = [\n\n  {\n    path: '/',\n\n    component: Main,\n    meta: { requiresAuth: true },\n    children: [\n\n      {\n        path: '/userlist',\n        name: '用户管理',\n        component: UserMananger,\n        meta: { requiresAuth: true }, // 标记需要登录的路由\n        \n      },\n\n    ]\n  },\n  {\n    path: '/login',\n    name: 'Login',\n    component: Login\n  },\n  {\n    path: '/register',\n    name: 'Register',\n    component: Register,\n    show: false\n  },\n  {\n    path: '/UpdateUser',\n    name: 'Register',\n    component: UpdateUser,\n    show: false\n  },\n  {\n    path: '/index',\n    name: '用户管理',\n    component: Index,\n    show: true,\n    redirect: \"/userlist\",\n    children:[\n      {\n        path:\"/userMananger\",\n        name:\"查询用户\",\n        component:UserMananger,\n        \n      },\n      {\n        path:\"/register\",\n        name:\"添加用户\",\n        component:Register,\n      }\n    ]\n  }\n]\n\nconst router = new VueRouter({\n  routes\n})\n\n\nrouter.beforeEach((to, from, next) => {\n  // 检查是否需要登录的路由\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    // 这里可以实现登录状态的检查，例如检查localStorage或vuex状态\n    const isLoggedIn = localStorage.getItem('isLoggedIn') === 'true';\n    if (!isLoggedIn) {\n      alert('没有登录')\n      // 如果未登录，则重定向到登录页面\n      next('/login');\n    } else {\n      next(); // 如果已登录，继续前往目标路由\n    }\n  } else {\n    next(); // 如果不需要登录，继续前往目标路由\n  }\n});\n\nexport default router\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,MAAM,oBAAoB;AACtC;AACA,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,YAAY,MAAM,0BAA0B;AACnD,OAAOC,IAAI,MAAM,mBAAmB;AACpC,OAAOC,UAAU,MAAM,yBAAyB;AAEhDN,GAAG,CAACO,GAAG,CAACN,SAAS,CAAC;AAElB,MAAMO,MAAM,GAAG,CAEb;EACEC,IAAI,EAAE,GAAG;EAETC,SAAS,EAAEL,IAAI;EACfM,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK,CAAC;EAC5BC,QAAQ,EAAE,CAER;IACEJ,IAAI,EAAE,WAAW;IACjBK,IAAI,EAAE,MAAM;IACZJ,SAAS,EAAEN,YAAY;IACvBO,IAAI,EAAE;MAAEC,YAAY,EAAE;IAAK,CAAC,CAAE;EAEhC,CAAC;AAGL,CAAC,EACD;EACEH,IAAI,EAAE,QAAQ;EACdK,IAAI,EAAE,OAAO;EACbJ,SAAS,EAAER;AACb,CAAC,EACD;EACEO,IAAI,EAAE,WAAW;EACjBK,IAAI,EAAE,UAAU;EAChBJ,SAAS,EAAEK,QAAQ;EACnBC,IAAI,EAAE;AACR,CAAC,EACD;EACEP,IAAI,EAAE,aAAa;EACnBK,IAAI,EAAE,UAAU;EAChBJ,SAAS,EAAEJ,UAAU;EACrBU,IAAI,EAAE;AACR,CAAC,EACD;EACEP,IAAI,EAAE,QAAQ;EACdK,IAAI,EAAE,MAAM;EACZJ,SAAS,EAAEP,KAAK;EAChBa,IAAI,EAAE,IAAI;EACVC,QAAQ,EAAE,WAAW;EACrBJ,QAAQ,EAAC,CACP;IACEJ,IAAI,EAAC,eAAe;IACpBK,IAAI,EAAC,MAAM;IACXJ,SAAS,EAACN;EAEZ,CAAC,EACD;IACEK,IAAI,EAAC,WAAW;IAChBK,IAAI,EAAC,MAAM;IACXJ,SAAS,EAACK;EACZ,CAAC;AAEL,CAAC,CACF;AAED,MAAMG,MAAM,GAAG,IAAIjB,SAAS,CAAC;EAC3BO;AACF,CAAC,CAAC;AAGFU,MAAM,CAACC,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpC;EACA,IAAIF,EAAE,CAACG,OAAO,CAACC,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACd,IAAI,CAACC,YAAY,CAAC,EAAE;IACvD;IACA,MAAMc,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,KAAK,MAAM;IAChE,IAAI,CAACF,UAAU,EAAE;MACfG,KAAK,CAAC,MAAM,CAAC;MACb;MACAP,IAAI,CAAC,QAAQ,CAAC;IAChB,CAAC,MAAM;MACLA,IAAI,CAAC,CAAC,CAAC,CAAC;IACV;EACF,CAAC,MAAM;IACLA,IAAI,CAAC,CAAC,CAAC,CAAC;EACV;AACF,CAAC,CAAC;AAEF,eAAeJ,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}